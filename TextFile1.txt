create table tab_exhibits
(
    id int not null auto_increment primary key ,
    exhibit_name varchar(50) not null check(exhibit_name != ' '),
    id_author int not null,
    creation_date date,
    art_direction varchar(50),
    art_form varchar(50) not null check(art_form IN('картина', 'скульптура', 'утварь', 'мебель', 'посуда', 'ювелирные украшения', 'прочее')),
    materials varchar(100)
);

create table tab_author
(
    id int not null auto_increment primary key,
    author_name varchar(100) check (author_name!=' '),
    birth_date date,
    death_date date,
    birth_country varchar(50)
);

create table tab_storage
(
    id int not null auto_increment primary key,
    storage_name varchar(50) not null
);

create table tab_space_storage
(
    id int not null auto_increment primary key,
    id_exhibits int not null,
    id_storage int not null,
    special_conditions bool
);

INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (1, 'Джоконда', 1, '1505-00-00', '', 'картина', 'холст масло');
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (2, 'Лошадь и всадник', 1, null, null, 'скульптура', 'бронза');
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (3, 'Бульвар Монмартр в Париже', 2, '1897-00-00', 'импрессионизм', 'картина', null);
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (4, 'Въезд в деревню Вуазен', 2, '1872-00-00', 'импрессионизм', 'картина', null);
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (5, 'Мыслитель', 3, '1888-00-00', 'импрессионизм', 'скульптура', 'бронза');
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (6, 'Поцелуй', 3, '1889-00-00', 'импрессионизм', 'скульптура', 'мрамор');
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (9, 'Брошь Ирис', 4, null, null, 'ювелирные украшения', 'резной камень бриллианты');
INSERT INTO host1323541_shambala1.tab_exhibits (id, exhibit_name, id_author, creation_date, art_direction, art_form, materials) VALUES (10, 'Портсигар', 4, null, null, 'прочее', 'серебро эмаль');

INSERT INTO host1323541_shambala1.tab_storage (id, storage_name) VALUES (1, 'зал 1');
INSERT INTO host1323541_shambala1.tab_storage (id, storage_name) VALUES (2, 'зал 2');
INSERT INTO host1323541_shambala1.tab_storage (id, storage_name) VALUES (3, 'хранилище 1');
INSERT INTO host1323541_shambala1.tab_storage (id, storage_name) VALUES (4, 'хранилище 2');

INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (1, 1, 1, 1);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (2, 2, 1, 0);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (3, 3, 2, 0);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (4, 4, 2, 0);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (5, 5, 2, 0);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (6, 6, 3, 0);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (7, 9, 2, 1);
INSERT INTO host1323541_shambala1.tab_space_storage (id, id_exhibits, id_storage, special_conditions) VALUES (8, 10, 4, 1);



DB.cs

using System;
using DataModel;
using MySql.Data.MySqlClient;

namespace DBConnect
{
    public class DB
    {
        string connectionString = "Server=mysql60.hostland.ru;Database=host1323541_itstep30;Uid=host1323541_itstep;Pwd=269f43dc;";
        
        private MySqlConnection _connection;
        private MySqlCommand _query;
            
        public DB()
        {
            _connection = new MySqlConnection(connectionString);
            _query = new MySqlCommand
            {
                Connection = _connection
            };
        }

        public void Open()
        {
            try
            {
                _connection.Open();
            }
            catch (InvalidOperationException)
            {
                throw new Exception("Ошибка открытия БД");
            }
            catch (MySqlException)
            {
                throw new Exception("Подключаемся к уже открытой БД");
            }
        }

        //TODO Дополнить метод проверками исключений
        public void Close()
        {
            _connection.Close();
        }

        private MySqlDataReader SelectQuery(string sql)
        {
            _query.CommandText = sql;
            var result = _query.ExecuteReader();
            return result;
        }

        public ClientModel GetClient(string name)
        {
            var sql = $"select * from tab_client where full_name = '{name}';";
            var result = SelectQuery(sql);
            result.Read();
            
            var id = result.GetInt32("id");
            var fname = result.GetString("full_name");
            var phone = result.GetString("phone");
            
            ClientModel client = new ClientModel(id, fname, phone);
            
            return client;
        }

        public ProductModel GetProduct(string name)
        {
            var sql = $"select * from tab_product where name = '{name}';";
            var result = SelectQuery(sql);
            result.Read();
            
            int id = result.GetInt32("id");
            int quant = result.GetInt32("id");
            string pname = result.GetString("name");
            string dimension = result.GetString("dimension");
            
            var product = new ProductModel(id, pname, quant, dimension);
            
            return product;
        }

        public SalesModel GetSales(DateTime date)
        {
            var sql = $"select * from tab_sales where date_sales = '{date}';";
            var result = SelectQuery(sql);
            result.Read();
            
            int id = result.GetInt32("id");
            int id_prod = result.GetInt32("id_product");
            int id_client = result.GetInt32("id_client");
            int amount = result.GetInt32("amount");
            DateTime sdate = result.GetDateTime("date_sales");
            
            SalesModel smodel = new SalesModel(id, id_client, id_prod, amount, sdate);
            
            return smodel;
        }
    }
}

DataModel

namespace DataModel
{
    public class ClientModel
    {
        public int Id { get; set; }
        public string FullName { get; set; }
        public string Phone { get; set; }

        public ClientModel(int id, string fullName, string phone)
        {
            Id = id;
            FullName = fullName;
            Phone = phone;
        }

        public ClientModel() { }
    }
}

namespace DataModel
{
    public class ProductModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
        public string Dimension { get; set; }

        public ProductModel(int id, string name, int quantity, string dimension)
        {
            Id = id;
            Name = name;
            Quantity = quantity;
            Dimension = dimension;
        }

        public ProductModel() { }
    }
}

using System;

namespace DataModel
{
    public class SalesModel
    {
        public int Id { get; set; }
        public int IdClient { get; set; }
        public int IdProduct { get; set; }
        public int Amount { get; set; }
        public DateTime DateSales { get; set; }

        public SalesModel(int id, int idClient, int idProduct, int amount, DateTime dateSales)
        {
            Id = id;
            IdClient = idClient;
            IdProduct = idProduct;
            Amount = amount;
            DateSales = dateSales;
        }

        public SalesModel() { }
    }
}



Io.cs

using System;
using DBConnect;

namespace StoreClient
{
    public static class IO
    {
        public static void Welcome()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("************************");
            Console.WriteLine("***** Store Client *****");
            Console.WriteLine("*****     v0.1     *****");
            Console.WriteLine("************************");
            Console.WriteLine();
            Console.ResetColor();
        }

        public static void GoodBye()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("************************");
            Console.WriteLine("***** Store Client *****");
            Console.WriteLine("*****      BYE     *****");
            Console.WriteLine("************************");
            Console.ResetColor();
        }

        public static void ShowMenu()
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("1. Найти покупателя");
            Console.WriteLine("2. Найти продукт");
            Console.WriteLine("3. Найти продажу");
            Console.WriteLine("0. Выход из программы");
            Console.ResetColor();
        }

        public static int InputKey()
        {
            Console.Write("Введите пункт меню: ");
            var key = Console.ReadLine();
            return key switch
            {
                "1" => 1,
                "2" => 2,
                "3" => 3,
                "0" => 0,
                _ => InputKey()
            };
        }
        
        //Временные методы для проверки
        public static void TempFindClient()
        {
            var db = new DB();
            db.Open();
            
            var client = db.GetClient("Sergey");

            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.WriteLine($"id - {client.Id}");
            Console.WriteLine($"full_name - {client.FullName}");
            Console.WriteLine($"phone - {client.Phone}");
            Console.WriteLine();
            Console.ResetColor();
            
            db.Close();
        }
        public static void TempFindProduct()
        {
            var db = new DB();
            db.Open();

            var product = db.GetProduct("Sugar 0.8 kg");
            Console.ForegroundColor = ConsoleColor.DarkMagenta;
            Console.WriteLine($"id - {product.Id}");
            Console.WriteLine($"name - {product.Name}");
            Console.WriteLine($"quantity - {product.Quantity}");
            Console.WriteLine($"dimension - {product.Dimension}");
            Console.WriteLine();
            Console.ResetColor();
            
            db.Close();
        }
        public static void TempFindSales()
        {
            var db = new DB();
            db.Open();
            
            //TODO написать реализацию по аналогии с продуктом и клиентом
            
            db.Close();
        }
    }
}


Program,cs

namespace StoreClient
{
    class Program
    {
        static void Main()
        {
            IO.Welcome();

            var exit = false;
            do
            {
                IO.ShowMenu();
                var select = IO.InputKey();
                switch (select)
                {
                    case 1: // 1. Найти покупателя
                        IO.TempFindClient();
                        break;
                    case 2: // 2. Найти продукт
                        IO.TempFindProduct();
                        break;
                    case 3: // 3. Найти продажу
                        IO.TempFindSales();
                        break;
                    case 0: // 0. Выход из программы
                        exit = true;
                        break;
                }
            } while (!exit);

            IO.GoodBye();
        }
    }
}



